# -*- coding: utf-8 -*-
"""2_performing_binary_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NUpTx7dQ_sCUzFY5YdyoIqP8nTcsEiQz

# Creating a binary classifier to detect smiles
"""

import os
import pathlib
import glob
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras import Model
from tensorflow.keras.layers import *
from tensorflow.keras.preprocessing.image import *

def load_images_and_labels(image_paths):
    images = []
    labels = []

    for image_path in image_paths:
        image = load_img(image_path, target_size=(32, 32),
                         color_mode='grayscale')
        image = img_to_array(image)

        label = image_path.split(os.path.sep)[-2]
        label = 'positive' in label
        label = float(label)

        images.append(image)
        labels.append(label)

    return np.array(images), np.array(labels)

def build_network():
    input_layer = Input(shape=(32, 32, 1))
    x = Conv2D(filters=20,
               kernel_size=(5, 5),
               padding='same',
               strides=(1, 1))(input_layer)
    x = ELU()(x)
    x = BatchNormalization()(x)
    x = MaxPooling2D(pool_size=(2, 2),
                     strides=(2, 2))(x)
    x = Dropout(0.4)(x)

    x = Conv2D(filters=50,
               kernel_size=(5, 5),
               padding='same',
               strides=(1, 1))(x)
    x = ELU()(x)
    x = BatchNormalization()(x)
    x = MaxPooling2D(pool_size=(2, 2),
                     strides=(2, 2))(x)
    x = Dropout(0.4)(x)

    x = Flatten()(x)
    x = Dense(units=500)(x)
    x = ELU()(x)
    x = Dropout(0.4)(x)

    output = Dense(1, activation='sigmoid')(x)

    model = Model(inputs=input_layer, outputs=output)
    return model

cd ..

"""## Downloading the dataset and creating X and Y labels"""

#download the dataset which is hosted in the following repo.
if not os.path.isdir("SMILEsmileD"):
    !git clone https://github.com/hromi/SMILEsmileD.git

files_pattern = "SMILEsmileD/SMILEs/*/*/*.jpg"

dataset_paths = [*glob.glob(files_pattern)]
print("the dataset paths:> ",dataset_paths)

X, y = load_images_and_labels(dataset_paths)

X /= 255.0
total = len(y)
total_positive = np.sum(y)
total_negative = total - total_positive
print(f'Total images: {total}')
print(f'Smile images: {total_positive}')
print(f'Non-smile images: {total_negative}')

"""## Splitting X_train and X_test """

(X_train, X_test,y_train, y_test) = train_test_split(X, y,
                                     test_size=0.2,
                                     stratify=y,
                                     random_state=999)

"""## Again from X_train split for X_val"""

(X_train, X_val,
 y_train, y_val) = train_test_split(X_train, y_train,
                                    test_size=0.2,
                                    stratify=y_train,
                                    random_state=999)

model = build_network()
model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

BATCH_SIZE = 32
EPOCHS = 20
model.fit(X_train, y_train,
          validation_data=(X_val, y_val),
          epochs=EPOCHS,
          batch_size=BATCH_SIZE,
          class_weight={
              1.0: total / total_positive,
              0.0: total / total_negative
          })
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f'Loss: {test_loss}, accuracy: {test_accuracy}')

"""## Testing the model on unseen data from internet"""

!wget -O test_img.jpg --no-check-certificate "https://image.freepik.com/free-photo/close-up-happy-face-boy_1150-12122.jpg"

!wget -O test_img2.jpg --no-check-certificate "https://cdn.hswstatic.com/gif/smiling-makes-you-happy-1.jpg"

image = load_img("SMILEsmileD/SMILEs/negatives/negatives7/490.jpg", target_size=(32, 32),
                         color_mode='grayscale')
image = img_to_array(image)
image= image/255.0

image = np.expand_dims(image, axis=0)

model.predict(image) #if the value is below 0.5 then its negative sample and visa-versa, its positive

import matplotlib.pyplot as plt
image = load_img("SMILEsmileD/SMILEs/negatives/negatives7/490.jpg", target_size=(32, 32),
                         color_mode='grayscale')
plt.imshow(image,cmap='gray')